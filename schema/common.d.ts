/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/app/{contractId}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * アプリアクセストークンを取得
         * @description アプリとしてアプリユーザーのデータにAPIアクセスするためのアプリアクセストークンを取得します。
         *     クライアントIDとクライアントシークレットは、スマレジ・デベロッパーズでアプリの「環境設定」ページから確認できます。
         *
         */
        post: operations["getAppAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザー認可を要求
         * @description ユーザーにログインと認可を要求するためのエンドポイントです。
         *     ユーザーをこのエンドポイントにリダイレクトし、認可を得た後に指定したリダイレクトURIに認可コードを含めてリダイレクトされます。
         *
         */
        get: operations["authorizeUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorize/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーアクセストークンを取得
         * @description 認可コードを使ってユーザーアクセストークンを取得します。
         *     クライアントIDとクライアントシークレットは、スマレジ・デベロッパーズでアプリの「環境設定」ページから確認できます。
         *
         */
        post: operations["getUserAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorize/token/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーアクセストークンをリフレッシュ
         * @description リフレッシュトークンを使用してユーザーアクセストークンを更新します。
         *     クライアントIDとクライアントシークレットは、スマレジ・デベロッパーズでアプリの「環境設定」ページから確認できます。
         *
         */
        post: operations["refreshUserAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userinfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザー情報を取得
         * @description UserInfoエンドポイントからログインユーザー情報を取得します。アクセストークンにopenidスコープが必要です。
         */
        post: operations["getUserInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description エラーレスポンス */
        Error: {
            /**
             * @description エラータイプを識別するURI、もしくはabout:blank
             * @example about:blank
             */
            type: string;
            /**
             * @description エラーの概要
             * @example Bad Request
             */
            title: string;
            /**
             * @description エラーの詳細メッセージ
             * @example 入力パラメータが正しくありません
             */
            detail?: string;
            /**
             * @description HTTPステータスコード
             * @example 400
             */
            status?: number;
        };
        /** @description アクセストークン発行レスポンス */
        AccessTokenResponse: {
            /**
             * @description アクセストークンで有効なスコープリスト
             * @example pos.products:read pos.products:write
             */
            scope: string;
            /**
             * @description トークンタイプ
             * @example Bearer
             */
            token_type: string;
            /**
             * @description アクセストークンの有効期間(秒)
             * @example 3600
             */
            expires_in: number;
            /**
             * @description アクセストークン
             * @example eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            access_token: string;
            /**
             * @description リフレッシュトークン。スコープにoffline_accessを指定した時のみ含まれる。
             * @example def50200d0b6...
             */
            refresh_token?: string;
            /**
             * @description IDトークン。スコープにopenidを指定した時のみ含まれる。
             * @example eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            id_token?: string;
        };
        /** @description ユーザー情報 */
        UserInfo: {
            /**
             * @description 契約またはユーザーの識別子
             * @example smaregi:abc123
             */
            sub: string;
            /** @description 契約情報 */
            contract: {
                /**
                 * @description 契約ID
                 * @example smaregi
                 */
                id?: string;
                /**
                 * @description 契約ID内においてのユーザー識別子
                 * @example user_123456
                 */
                user_id?: string;
                /**
                 * @description ユーザーが契約のオーナーであるか
                 * @example true
                 */
                is_owner?: boolean;
            };
            /**
             * @description ログインユーザーのアカウントに登録されている表示用フルネーム
             * @example スマレジ 太郎
             */
            name?: string;
            /**
             * @description ログインユーザーのアカウントに登録されているメールアドレス
             * @example taro@example.com
             */
            email?: string;
            /**
             * @description メールアドレスが検証済みか
             * @example true
             */
            email_verified?: boolean;
        };
        /** @description Webhook通知の基本フォーマット */
        WebhookBase: {
            /**
             * @description イベントの発生した契約ID
             * @example user_contract
             */
            contractId: string;
            /**
             * @description イベント名
             * @example AppSubscription
             */
            event: string;
            /**
             * @description イベントのアクション名
             * @example start
             */
            action: string;
        };
        AppSubscriptionWebhook: components["schemas"]["WebhookBase"] & {
            /**
             * @description イベント名
             * @example AppSubscription
             * @enum {string}
             */
            event: "AppSubscription";
            /**
             * @description アクション名
             * @example start
             * @enum {string}
             */
            action: "start" | "end" | "change-plan" | "change-options" | "force-stop" | "cancel-force-stop";
            /**
             * Format: date
             * @description アクション発生日(yyyy-mm-dd)
             * @example 2020-01-01
             */
            date: string;
            /**
             * @description 認証認可情報のクライアントID
             * @example XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
             */
            clientId: string;
            /** @description プラン情報 */
            plan?: {
                /**
                 * @description お試し日数
                 * @example 15
                 */
                trial_days?: number;
                /**
                 * @description プラン合計価格
                 * @example 3000
                 */
                price?: number;
                /**
                 * @description プラン単価
                 * @example 1000
                 */
                unit_price?: number;
                /**
                 * @description 数量
                 * @example 3
                 */
                quantity?: number;
                /**
                 * @description プラン名
                 * @example スタンダードプラン
                 */
                name?: string;
            };
            /** @description オプション情報 */
            options?: {
                /**
                 * @description オプション合計価格
                 * @example 3000
                 */
                price?: number;
                /**
                 * @description オプション単価
                 * @example 1000
                 */
                unit_price?: number;
                /**
                 * @description 数量
                 * @example 3
                 */
                quantity?: number;
                /**
                 * @description オプション名
                 * @example オプション1
                 */
                name?: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAppAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description アプリユーザーの契約ID */
                contractId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description 認証フロータイプ（クライアントクレデンシャルフロー）
                     * @enum {string}
                     */
                    grant_type: "client_credentials";
                    /**
                     * @description 要求するAPIスコープ。複数の場合は半角スペースで結合して指定。
                     * @example pos.products:read pos.products:write
                     */
                    scope: string;
                };
            };
        };
        responses: {
            /** @description 正常レスポンス */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    authorizeUser: {
        parameters: {
            query: {
                /** @description レスポンスタイプ（認可コードフロー） */
                response_type: "code";
                /** @description アプリのクライアントID */
                client_id: string;
                /** @description ユーザーに認可を要求するスコープ。
                 *     複数の場合は半角スペースで結合して指定。
                 *      */
                scope: string;
                /** @description CSRF対策に設定するランダムな文字列。
                 *     動的にランダムな文字列を生成して利用することを推奨。
                 *      */
                state?: string;
                /** @description ユーザー認可後のリダイレクト先URL。
                 *     スマレジ・デベロッパーズでアプリに登録したリダイレクトURIと一致する必要あり。
                 *      */
                redirect_uri?: string;
                /** @description PKCE (RFC 7636) の Code Challenge 値。
                 *     publicクライアントは必須、confidentialクライアントは推奨。
                 *      */
                code_challenge?: string;
                /** @description PKCE (RFC 7636) の Code Challenge メソッド */
                code_challenge_method?: "S256";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description リダイレクト（認可成功） */
            302: {
                headers: {
                    /** @description リダイレクト先URL、認可コードとステートを含む
                     *     例：https://example.com/callback?code=authorization_code&state=state_value
                     *      */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUserAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description 認証フロータイプ（認可コードフロー）
                     * @enum {string}
                     */
                    grant_type: "authorization_code";
                    /** @description 取得した認可コード */
                    code: string;
                    /** @description ユーザー認可の要求時に指定したリダイレクトURIと同じ値 */
                    redirect_uri?: string;
                    /** @description PKCE (RFC 7636) の Code Verifier 値。
                     *     認可エンドポイントで PKCE code_challenge を指定した場合、必須。
                     *      */
                    code_verifier?: string;
                };
            };
        };
        responses: {
            /** @description 正常レスポンス */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    refreshUserAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /**
                     * @description リフレッシュトークンを使用するためのフローを指定
                     * @enum {string}
                     */
                    grant_type: "refresh_token";
                    /** @description ユーザーアクセストークン取得時に含まれるリフレッシュトークン */
                    refresh_token: string;
                };
            };
        };
        responses: {
            /** @description 正常レスポンス */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 正常レスポンス */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
